import numpy as np
import unittest
import sys
sys.path.append('..')
from env.easy21 import Easy21Env
from env.actions import Action
from estimator import Estimator



class TestFeatures(unittest.TestCase):
    def setUp(self):
        self.estimator = Estimator(Easy21Env())

    def test_1_1_hit(self):
        features = self.estimator.featurize_sa((1, 1), Action.HIT.value)

        expected = np.zeros(36)
        expected[0] = 1
        self.assertSequenceEqual(features.tolist(), expected.tolist())

    def test_4_1_hit(self):
        features = self.estimator.featurize_sa((4, 1), Action.HIT.value)

        expected = np.zeros(36)
        expected[0] = 1
        expected[1] = 1
        self.assertSequenceEqual(features.tolist(), expected.tolist())

    def test_4_4_hit(self):
        features = self.estimator.featurize_sa((4, 4), Action.HIT.value)
        expected = np.zeros(36)
        expected[0] = 1
        expected[1] = 1
        expected[6] = 1
        expected[7] = 1
        self.assertSequenceEqual(features.tolist(), expected.tolist())

    def test_16_7_hit(self):
        features = self.estimator.featurize_sa((16, 7), Action.HIT.value)

        expected = np.zeros(36)
        expected[10] = 1
        expected[11] = 1
        expected[16] = 1
        expected[17] = 1
        self.assertSequenceEqual(features.tolist(), expected.tolist())

    def test_21_10_hit(self):
        features = self.estimator.featurize_sa((21, 10), Action.HIT.value)

        expected = np.zeros(36)
        expected[17] = 1
        self.assertSequenceEqual(features.tolist(), expected.tolist())

    def test_1_1_stick(self):
        features = self.estimator.featurize_sa((1, 1), Action.STICK.value)

        expected = np.zeros(36)
        expected[18] = 1
        self.assertSequenceEqual(features.tolist(), expected.tolist())

    def test_21_10_stick(self):
        features = self.estimator.featurize_sa((21, 10), Action.STICK.value)

        expected = np.zeros(36)
        expected[35] = 1
        self.assertSequenceEqual(features.tolist(), expected.tolist())

if __name__ == '__main__':
    unittest.main()